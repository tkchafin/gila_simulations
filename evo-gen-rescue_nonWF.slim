// Keywords: nonWF, non-Wright-Fisher, QTL, quantitative trait loci
//TODO: Add reproductive choice based on  selection against heterozygotes (m2/m3 heterozygosity)

initialize() {
	initializeSLiMModelType("nonWF");
	defineConstant("K1", 100);
	defineConstant("K2", 100);

   //phenotypic optima and env. change
	defineConstant("opt1start", 10.0);
	defineConstant("opt2", -10.0);
	defineConstant("opt1b", -10.0);
	defineConstant("delta", -0.01); // rate of phenotypic change per gen, following Tdelta
	defineConstant("Tdelta", 70000);
	
	defineConstant("match_sd", 0.1); //standard deviation of allowable deviation of males from optimum
	defineConstant("pois_mean", 1.5); //mean for poisson dist on litter size

   //migration 2 --> 1
	defineConstant("Tm", 70000);
	defineConstant("m",0.2);

	//initializations
	defineConstant("Tburnin",30000);
	defineConstant("p1size",100);
	defineConstant("p2size",100);
	
	initializeSex("A");
	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);  // QTL
	initializeMutationType("m2", 0.5, "e", 0.01); // deleterious in p2
	initializeMutationType("m3", 0.5, "e", 0.01); // deleterious in p1
	initializeGenomicElementType("g1", c(m1,m2,m3), c(0.98, 0.01, 0.01));
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
	
}
reproduction(p1, "M") {
//   if (sim.generation > Tm){
//      match = individual.sumOfMutationsOfType(m3);
//      print(match);
//      if (rnorm(1,0.0,1) < match){
//         //subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//         litterSize = rpois(1, pois_mean);
//         for (j in seqLen(litterSize))
//            subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//      }
//	   subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//   }else{
         litterSize = rpois(1, pois_mean);
         if (litterSize > 0){
         for (j in seqLen(litterSize))
            subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
         }
//	}
}

reproduction(p2, "M") {
//   if (sim.generation > Tburnin){
//      match = individual.sumOfMutationsOfType(m2);// - subpop.getValue("mate-opt");
//      //print(match);
//      if (rnorm(1,0.0,match_sd) < match){
//         subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//         litterSize = rpois(1, pois_mean);
//         for (j in seqLen(litterSize))
//            subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//      }
//	   subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//   }else{
         litterSize = rpois(1, pois_mean);
         if (litterSize > 0){
         for (j in seqLen(litterSize))
            subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
         }
//	}
}

1 early() {
	sim.addSubpop("p1", p1size);
	sim.addSubpop("p2", p2size);
	sim.setValue("opt1", opt1start);
	p1.setValue("mate-opt", opt1start);
	p2.setValue("mate-opt", opt2);
}
early() {

	// QTL-based phenotypes
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m1);
	
	//set optimum for pop1
	if (sim.generation > Tdelta){
		sim.setValue("opt1", (sim.getValue("opt1") + delta));
		if (sim.getValue("opt1") < opt1b){
		  sim.setValue("opt1", opt1b);
		}
		optimum1 = sim.getValue("opt1");
	}else if (sim.generation < Tburnin)
		optimum1 = sim.generation/Tburnin * sim.getValue("opt1");
	else
		optimum1 = sim.getValue("opt1");
	
	//set optimum for pop2
	if (sim.generation > Tdelta)
		optimum2 = opt2;
	else if (sim.generation < Tburnin)
		optimum2 = sim.generation/Tburnin * opt2;
	else
		optimum2 = opt2;
	
	opts = c(rep(optimum1, p1.individualCount), rep(optimum2, p2.individualCount));
	deviations = opts - phenotypes;
	fitnessFunctionMax = dnorm(0.0, 0.0, 5.0);
	adaptation = dnorm(deviations, 0.0, 5.0) / fitnessFunctionMax;
	inds.fitnessScaling = 0.1 + adaptation * 0.9;
	inds.tagF = phenotypes;   // just for output below
	
	// density-dependence with no at low density
	p1.fitnessScaling = min(K1 / p1.individualCount, 1.0);
	p2.fitnessScaling = min(K2 / p2.individualCount, 1.0);
	
	if (sim.generation > Tdelta){
	   //migration p2 --> p1 w/ probability m
      prob_mig = runif(inds.size(), 0.0, 1.0);
      moving = inds[prob_mig < m];
      from_p2 = moving[moving.subpopulation == p2];
      p1.takeMigrants(from_p2);   
   }

}
fitness(m1) { return 1.0; }
//fitness(m2) { return 1.0; }
fitness(m2, p2) { return 1/relFitness; }
fitness(m3, p1) { return 1/relFitness; }
//fitness(m2, p1) {return 1.0;}
//fitness(m3, p2) {return 1.0;}

late() {
	if (p1.individualCount == 0)
	{
		// stop at extinction
		catn("Extinction in generation " + sim.generation + ".");
		sim.simulationFinished();
	}
	else
	{
		// output the phenotypic mean and pop size
//		phenotypes1 = p1.individuals.tagF;
//		phenotypes2 = p2.individuals.tagF;
//		
//		cat("pop1 phenotype mean: " + mean(phenotypes1));
//		if (size(phenotypes1) > 1)
//			cat(" (sd " + sd(phenotypes1) + ")");
//		catn();
//		cat("pop2 phenotype mean: " + mean(phenotypes2));
//		if (size(phenotypes2) > 1)
//			cat(" (sd " + sd(phenotypes2) + ")");
//		catn();
	}
}
100000 late() { sim.simulationFinished(); }
