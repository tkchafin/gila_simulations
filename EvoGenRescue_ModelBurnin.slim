// Keywords: nonWF, non-Wright-Fisher, continuous space, continuous spatial landscape, periodic boundaries, selfing

//NOTE: SIMULATIONS ASSUME THAT P2 OPTIMUM IS LESS THAN P1 OPTIMUM, AND 
//ENVIRONMENTAL CHANGE IS ALWAYS NEGATIVE 

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");


	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);  // QTL
	initializeMutationType("m2", 0.5, "e", 0.005); // deleterious in p2
	initializeMutationType("m3", 0.5, "e", 0.005); // deleterious in p1
	//initializeMutationType("m4", 0.5, "f", 0.0); //neutral
	initializeGenomicElementType("g1", c(m1,m2,m3), c(0.98, 0.01, 0.01));
	//initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
	
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.05);
}

1:60000 reproduction(p1){
	mate = i2.nearestNeighbors(individual, 1);
	for (i in seqLen(rpois(1, 2.0))){
		if (mate.size()){
			offspring = subpop.addCrossed(individual, mate);
			// set offspring position
			pos = individual.spatialPosition + rnorm(2, 0, 0.01);
			offspring.setSpatialPosition(p1.pointPeriodic(pos));
		}
	}
}

60001: reproduction(p1) {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 1);
	if (mate.size()){
		match = (abs(1.0 - mate.sumOfMutationsOfType(m1)));
		if (abs(rnorm(1, 0.0, 0.4)) > match){
			for (i in seqLen(rpois(1, 2.0))){
				offspring = subpop.addCrossed(individual, mate);
				// set offspring position
				pos = individual.spatialPosition + rnorm(2, 0, 0.01);
				offspring.setSpatialPosition(p1.pointPeriodic(pos));
			}
		}
	}
}

1:60000 reproduction(p2){
	mate = i2.nearestNeighbors(individual, 1);
	for (i in seqLen(rpois(1, 2.0))){
		if (mate.size()){
			offspring = subpop.addCrossed(individual, mate);
			// set offspring position
			pos = individual.spatialPosition + rnorm(2, 0, 0.01);
			offspring.setSpatialPosition(p2.pointPeriodic(pos));
		}
	}
}

60001: reproduction(p2) {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 1);
	if (mate.size()){
		match = (abs(0.0 - mate.sumOfMutationsOfType(m1)));
		if (abs(rnorm(1, 0.0, 0.4)) > match){
			for (i in seqLen(rpois(1, 2.0))){
				offspring = subpop.addCrossed(individual, mate);
				// set offspring position
				pos = individual.spatialPosition + rnorm(2, 0, 0.01);
				offspring.setSpatialPosition(p2.pointPeriodic(pos));
			}
		}
	}
}

1 early() {
	

	sim.addSubpop("p1", 100);
	sim.addSubpop("p2", 100);
	
	
	p1.setSpatialBounds(c(0.0, 0.0, 1.0, 1.0));
	p2.setSpatialBounds(c(0.0, 0.0, 1.0, 1.0));
	
	defineConstant("mapValues", runif(25, 0.0, 1.0));
	p1.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
	p2.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
	
	// random initial positions
	for (ind in p1.individuals)
		ind.setSpatialPosition(p1.pointUniform());
	for (ind in p2.individuals)
		ind.setSpatialPosition(p2.pointUniform());
	
	sim.setValue("change", 1.0);
}

early() {
	//i1.evaluate();

	// construct phenotypes from the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m1);
	
	// color individuals according to phenotype
	inds.color = p1.spatialMapColor("map1", phenotype);
}

//BURN IN PERIOD 1: Generating Variation
1:10000 early(){
	//range-wide density dependence if < Tburn3
	p1.fitnessScaling = min(300 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(300 / p2.individualCount, 1.5);

}

//BURN IN PERIOD 2: Evolving towards pre-defined optima
10001:70000 early(){
	inds = sim.subpopulations.individuals;
	phenotype =  sim.subpopulations.individuals.sumOfMutationsOfType(m1);
	
	p1.fitnessScaling = min(300 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(300 / p2.individualCount, 1.5);
	
	optima = c(rep(1.0, p1.individualCount), rep(0.0, p2.individualCount));
	deviations = optima - phenotype;
	fitnessFunctionMax = dnorm(0.0, 0.0, 0.4);
	adaptation = dnorm(deviations, 0.0, 0.4) / fitnessFunctionMax; //normlz (0,1]
	scale=(70000-sim.generation)/(70000-10000);
	mod_adapt=(scale) + adaptation*(1.0-scale);
	inds.fitnessScaling = 0.1+mod_adapt*(0.9);	//FLOOR = 0.1
}


//BURN IN PERIOD 3: Working in spatial effect and mate choice
70001:90000 early(){
	inds = sim.subpopulations.individuals;
	phenotype =  sim.subpopulations.individuals.sumOfMutationsOfType(m1);
	
	p1.fitnessScaling = min(300 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(300 / p2.individualCount, 1.5);
	
	optima = NULL;
	for (ind in inds)
		optima = c(optima, p1.spatialMapValue("map1", ind.spatialPosition[0:1])); //try saply to optimize
	deviations = optima - phenotype;
	fitnessFunctionMax = dnorm(0.0, 0.0, 0.4);
	adaptation = dnorm(deviations, 0.0, 0.4) / fitnessFunctionMax; 
	inds.fitnessScaling = 0.1 + adaptation*(0.9); //FLOOR = 0.1
}

90000 early(){
	sim.outputFull("model.txt"); 
	sim.simulationFinished();
}



fitness(m1) { return 1.0; }
fitness(m2, p2) { return 1/(relFitness); }
fitness(m3, p1) { return 1/(relFitness); }


late()
{
	if (p1.individualCount == 0){
		// stop at extinction
		catn("Population 1 extinct at generation " + sim.generation + ".");
		sim.simulationFinished();
	}
	if (p2.individualCount == 0){
		// stop at extinction
		catn("Population 2 extinct at generation " + sim.generation + ".");
		sim.simulationFinished();
	}
	// move around a bit
	for (ind in p1.individuals){
		newPos = ind.spatialPosition + runif(2, -0.01, 0.01);
		ind.setSpatialPosition(p1.pointPeriodic(newPos));
	}
	for (ind in p2.individuals){
		newPos = ind.spatialPosition + runif(2, -0.01, 0.01);
		ind.setSpatialPosition(p2.pointPeriodic(newPos));
	}
	// then look for mates
	i2.evaluate();	
}

100000 late() {
	print("Simulation finished.");
	sim.simulationFinished();
}
