// Keywords: nonWF, non-Wright-Fisher, continuous space, continuous spatial landscape, periodic boundaries, selfing

//NOTE: SIMULATIONS ASSUME THAT P2 OPTIMUM IS LESS THAN P1 OPTIMUM, AND 
//ENVIRONMENTAL CHANGE IS ALWAYS NEGATIVE 

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xy", periodicity="xy");
	defineConstant("K1", 200);   // carrying capacity p1
	defineConstant("K2", 200);   // carrying capacity p2
	
	defineConstant("S", 0.1);   // spatial competition distance
	defineConstant("sigma_C", 0.05); //max dist for mate choice
	defineConstant("sigma_R", 0.2); //sd for prob. of mate selection
	defineConstant("sigma_K", 0.25); //sd for fitness function
	defineConstant("sigma_M", 0.01); //sd for dispersal
	defineConstant("MAX_AGE", 5);
	
	defineConstant("litter_lambda", 2.0); //lambda for poisson-distributed litter size
	
	//weight of habitat preference
	//strength of selection of phen towards pre-existing optimum
	//defineConstant("OPT_WEIGHT",0.0);
	//defineConstant("FLOOR",0.1); //minimum adaptive value, effects prob. of rescue
	//defineConstant("BURN_FLOOR",0.1); //starting floor for each burnin stage
	
	//Maximum benefit at low density
	//maximum fitness benefit at low density; <1=allee;>1=increased fitness
	//note that this value will not take into effect until
	//AFTER burn-in is completed. During burnin it is fixed at BURN_DENS
	//defineConstant("DENS_SEL",1.0); 	
	//defineConstant("BURN_DENS", 1.5);
	
	
	//maximum allowable fitness advantage for m2 and m3 variants in SOURCE pop
	//defineConstant("M2_CAP", 1.00);
	//defineConstant("M3_CAP", 1.00);

	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);  // QTL
	initializeMutationType("m2", 0.5, "e", 0.05); // deleterious in p2
	initializeMutationType("m3", 0.5, "e", 0.05); // deleterious in p1
	//initializeMutationType("m4", 0.5, "f", 0.0); //neutral
	initializeGenomicElementType("g1", c(m1,m2,m3), c(0.98, 0.01, 0.01));
	//initializeGenomicElementType("g1", m1, 1.0);
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
	
	//burn-in parameters
	//defineConstant("Tburn1",30000); //time to generate variation
	//defineConstant("Tburn2",50000); //time to evolve pops towards pre-defined optima
	//defineConstant("Tburn3",70000); //time for equilibrium after spatial fitness takes effect
	//defineConstant("Tburn4",80000); //time for habitat selection to take effect
	defineConstant("opt1", 1.0);
	defineConstant("opt2", 0.0);
	//defineConstant("Tm", 90000);
	defineConstant("Tdelta", 90000);
	defineConstant("m",0.0); //migration rate p2 --> p1
	defineConstant("opt1b", 0.85);
	defineConstant("max_change", 0.5);
	defineConstant("delta", -0.0001); //rate of change from opt1 to opt2 starting at Tdelta
	
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S*3);
	i1.setInteractionFunction("n", 1.0, S);

	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=sigma_C);
}

1:60000 reproduction(p1){
	mate = i2.nearestNeighbors(individual, 1);
	for (i in seqLen(rpois(1, litter_lambda))){
		if (mate.size()){
			offspring = subpop.addCrossed(individual, mate);
			// set offspring position
			pos = individual.spatialPosition + rnorm(2, 0, sigma_M);
			offspring.setSpatialPosition(p1.pointPeriodic(pos));
		}
	}
}

60001: reproduction(p1) {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 1);
	if (mate.size()){
		match = (abs(opt1 - mate.sumOfMutationsOfType(m1)));
		if (abs(rnorm(1, 0.0, sigma_R)) > match){
			for (i in seqLen(rpois(1, litter_lambda))){
				offspring = subpop.addCrossed(individual, mate);
				// set offspring position
				pos = individual.spatialPosition + rnorm(2, 0, sigma_M);
				offspring.setSpatialPosition(p1.pointPeriodic(pos));
			}
		}
	}
}

1:60000 reproduction(p2){
	mate = i2.nearestNeighbors(individual, 1);
	for (i in seqLen(rpois(1, litter_lambda))){
		if (mate.size()){
			offspring = subpop.addCrossed(individual, mate);
			// set offspring position
			pos = individual.spatialPosition + rnorm(2, 0, sigma_M);
			offspring.setSpatialPosition(p2.pointPeriodic(pos));
		}
	}
}

60001: reproduction(p2) {
	// choose our nearest neighbor as a mate, within the max distance
	mate = i2.nearestNeighbors(individual, 1);
	if (mate.size()){
		match = (abs(opt2 - mate.sumOfMutationsOfType(m1)));
		if (abs(rnorm(1, 0.0, sigma_R)) > match){
			for (i in seqLen(rpois(1, litter_lambda))){
				offspring = subpop.addCrossed(individual, mate);
				// set offspring position
				pos = individual.spatialPosition + rnorm(2, 0, sigma_M);
				offspring.setSpatialPosition(p2.pointPeriodic(pos));
			}
		}
	}
}

1 early() {
	

	sim.addSubpop("p1", K1);
	sim.addSubpop("p2", K2);
	
	sim.readFromPopulationFile("~/gila_simulations/model.txt");
	
	p1.setSpatialBounds(c(0.0, 0.0, 1.0, 1.0));
	p2.setSpatialBounds(c(0.0, 0.0, 1.0, 1.0));
	
	defineConstant("mapValues", runif(25, 0.0, 1.0));
	p1.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
	p2.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(0.0, 1.0), colors=c("red", "yellow"));
	
	// random initial positions
	for (ind in p1.individuals)
		ind.setSpatialPosition(p1.pointUniform());
	for (ind in p2.individuals)
		ind.setSpatialPosition(p2.pointUniform());
	
	sim.setValue("change", 1.0);
}

early() {
	i1.evaluate();

	// construct phenotypes from the additive effects of QTLs
	inds = sim.subpopulations.individuals;
	phenotype = inds.sumOfMutationsOfType(m1);
	
	// color individuals according to phenotype
	inds.color = p1.spatialMapColor("map1", phenotype);
}

//BURN IN PERIOD 1: Generating Variation
1:10000 early(){
	//range-wide density dependence if < Tburn3
	p1.fitnessScaling = min(K1 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(K2 / p2.individualCount, 1.5);

}

//BURN IN PERIOD 2: Evolving towards pre-defined optima
10001:70000 early(){
	inds = sim.subpopulations.individuals;
	phenotype =  sim.subpopulations.individuals.sumOfMutationsOfType(m1);
	
	p1.fitnessScaling = min(K1 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(K2 / p2.individualCount, 1.5);
	
	optima = c(rep(opt1, p1.individualCount), rep(opt2, p2.individualCount));
	deviations = optima - phenotype;
	fitnessFunctionMax = dnorm(0.0, 0.0, sigma_K);
	adaptation = dnorm(deviations, 0.0, sigma_K) / fitnessFunctionMax; //normlz (0,1]
	scale=(70000-sim.generation)/(70000-10000);
	mod_adapt=(scale) + adaptation*(1.0-scale);
	inds.fitnessScaling = 0.1+mod_adapt*(0.9);	//FLOOR = 0.1
}


//BURN IN PERIOD 3: Working in spatial effect and mate choice
70001:80000 early(){
	inds = sim.subpopulations.individuals;
	phenotype =  sim.subpopulations.individuals.sumOfMutationsOfType(m1);
	
	p1.fitnessScaling = min(K1 / p1.individualCount, 1.5);
	p2.fitnessScaling = min(K2 / p2.individualCount, 1.5);
	
	optima = NULL;
	for (ind in inds)
		optima = c(optima, p1.spatialMapValue("map1", ind.spatialPosition[0:1])); //try saply to optimize
	deviations = optima - phenotype;
	fitnessFunctionMax = dnorm(0.0, 0.0, sigma_K);
	adaptation = dnorm(deviations, 0.0, sigma_K) / fitnessFunctionMax; 
	inds.fitnessScaling = 0.1 + adaptation*(0.9); //FLOOR = 0.1
}

80000 early(){
	sim.outputFull("~/model.txt"); 
}

//BURN IN PERIOD 4: Adding spatial competitition
80001: early(){

	inds = sim.subpopulations.individuals;
	phenotype =  sim.subpopulations.individuals.sumOfMutationsOfType(m1);

	p1.fitnessScaling = min(10*K1 / p1.individualCount, 1.0);
	p2.fitnessScaling = min(10*K2 / p2.individualCount, 1.0);

	
	optima = NULL;
	for (ind in inds)
		optima = c(optima, p1.spatialMapValue("map1", ind.spatialPosition[0:1])); //try saply to optimize
	deviations = optima - phenotype;
	fitnessFunctionMax = dnorm(0.0, 0.0, sigma_K);
	adaptation = dnorm(deviations, 0.0, sigma_K) / fitnessFunctionMax; 
	inds.fitnessScaling = 0.1 + adaptation*(0.9); //FLOOR = 0.1

	// spatial competition provides density-dependent selection
	inds1 = p1.individuals;
	competition1 = i1.totalOfNeighborStrengths(inds1);
	competition1 = (competition1 + 1) / (2 * PI * S^2);
	inds1.fitnessScaling = 0.1 + (inds1.fitnessScaling * (K1/competition1))*0.9;
	inds2 = p2.individuals;
	competition2 = i1.totalOfNeighborStrengths(inds2);
	competition2 = (competition2 + 1) / (2 * PI * S^2);
	inds2.fitnessScaling = 0.1 + (inds2.fitnessScaling * (K2/competition2))*0.9;

	inds[inds.age > MAX_AGE].fitnessScaling = 0.0;

}


fitness(m1) { return 1.0; }
//fitness(m2, p1) { return min(relFitness, M2_CAP); }
//fitness(m3, p2) { return min(relFitness, M3_CAP); }
fitness(m2, p2) { return 1/relFitness; }
fitness(m3, p1) { return 1/relFitness; }


//Tdelta = Tm = 90001
81000: late(){
	inds = sim.subpopulations.individuals;
	//Migration, after time Tm

	//migration p2 --> p1 w/ probability m
   prob_mig = runif(inds.size(), 0.0, 1.0);
   moving = inds[prob_mig < m];
   from_p2 = moving[moving.subpopulation == p2];
   //sample a position for migrant(s) based on randomly choosing a p1 individual position
   inds1 = p1.individuals;
   for (migrant in from_p2){
      pair=sample(inds1, 1);
      newPos = pair.spatialPosition + runif(2, -sigma_M, sigma_M);
      migrant.setSpatialPosition(p1.pointPeriodic(newPos));
   }
   p1.takeMigrants(from_p2);   

	//GRADUAL CHANGE MODEL
	//Evaluate environmental change (affecting NEXT generation)
	//change all environmental pixel values at rate delta
//	sim.setValue("change", sim.getValue("change") + delta);
//	newMap = mapValues;
//	newMap[newMap < opt1b] = newMap[newMap<opt1b] + sim.getValue("change"); //values of map not below maximum change get shifted
//	//print(newMap[newMap > opt1b]);
//	newMap[newMap > 1.0] = 1.0; //set values outside of defined map range
//	newMap[newMap < 0.0] = 0.0;
//	p1.defineSpatialMap("map1", "xy", c(5, 5), newMap,
//	interpolate=T,valueRange=c(-0.2, 1.2), colors=c("red", "yellow"));
//	p2.defineSpatialMap("map1", "xy", c(5, 5), newMap,
//	interpolate=T,valueRange=c(-0.2, 1.2), colors=c("red", "yellow"));
	//maxing out change at a value opt1b
	sim.setValue("change", max(max_change, (sim.getValue("change") + delta)));
	newMap = ((mapValues - min(mapValues))/(max(mapValues)-min(mapValues))) * (sim.getValue("change") - 0.0) + 0.0; //normalize between new mim/max range (here, 0.0,change)
	p1.defineSpatialMap("map1", "xy", c(5, 5), newMap,
	interpolate=T,valueRange=c(-0.2, 1.2), colors=c("red", "yellow"));
	p2.defineSpatialMap("map1", "xy", c(5, 5), newMap,
	interpolate=T,valueRange=c(-0.2, 1.2), colors=c("red", "yellow"));
	//maxing out change at a value opt1b
	
}

late()
{
	if (p1.individualCount == 0){
		// stop at extinction
		catn("Population 1 extinct at generation " + sim.generation + ".");
		sim.simulationFinished();
	}
	if (p2.individualCount == 0){
		// stop at extinction
		catn("Population 2 extinct at generation " + sim.generation + ".");
		sim.simulationFinished();
	}
	// move around a bit
	for (ind in p1.individuals){
		newPos = ind.spatialPosition + runif(2, -sigma_M, sigma_M);
		ind.setSpatialPosition(p1.pointPeriodic(newPos));
	}
	for (ind in p2.individuals){
		newPos = ind.spatialPosition + runif(2, -sigma_M, sigma_M);
		ind.setSpatialPosition(p2.pointPeriodic(newPos));
	}
	// then look for mates
	i2.evaluate();	
}

100000 late() {
	print("Simulation finished.");
	sim.simulationFinished();
}
