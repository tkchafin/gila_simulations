// Keywords: nonWF, non-Wright-Fisher, QTL, quantitative trait loci
//TODO: Add reproductive choice based on  selection against heterozygotes (m2/m3 heterozygosity)

initialize() {
	initializeSLiMModelType("nonWF");
	initializeSLiMOptions(dimensionality="xyz");
	defineConstant("K1", 50);
	defineConstant("K2", 100);
	defineConstant("S", 0.1); 

   //phenotypic optima and env. change
	defineConstant("opt1start", 10.0);
	defineConstant("opt2", -10.0);
	defineConstant("opt1b", -10.0);
	defineConstant("delta", -0.1); // rate of phenotypic change per gen, following Tdelta
	defineConstant("Tdelta", 70000);
	
	defineConstant("match_sd", 0.1); //standard deviation of allowable deviation of males from optimum
	defineConstant("pois_mean", 1.5); //mean for poisson dist on litter size

   //migration 2 --> 1
	defineConstant("Tm", 70000);
	defineConstant("m",0.1);

	//initializations
	defineConstant("Tburnin",30000);
	defineConstant("p1size",100);
	defineConstant("p2size",100);
	
	//initializeSex("A");
	initializeMutationType("m1", 0.5, "n", 0.0, 1.0);  // QTL
	initializeMutationType("m2", 0.5, "e", 0.01); // deleterious in p2
	initializeMutationType("m3", 0.5, "e", 0.1); // deleterious in p1
	m1.convertToSubstitution = T;
	initializeGenomicElementType("g1", c(m1,m2,m3), c(0.98, 0.01, 0.01));
	initializeGenomicElement(g1, 0, 99999);
	initializeMutationRate(1e-7);
	initializeRecombinationRate(1e-8);
	
	// spatial competition
	initializeInteractionType(1, "xy", reciprocal=T, maxDistance=S * 3);
	i1.setInteractionFunction("n", 1.0, S);
	// spatial mate choice
	initializeInteractionType(2, "xy", reciprocal=T, maxDistance=0.1);
	
	
}
reproduction() {
	// choose our nearest neighbor as a mate, within the max distance
 	mate = i2.nearestNeighbors(individual, 1);
	for (i in seqLen(rpois(1, 0.1)))
 	{
 		if (mate.size()){
 			offspring = subpop.addCrossed(individual, mate);
 			// set offspring position
 			pos = individual.spatialPosition + c(rnorm(2, 0, 0.02),0.0);
 			offspring.setSpatialPosition(p1.pointPeriodic(pos));
 		}
 	}
}

//reproduction(p2, "M") {
////   if (sim.generation > Tburnin){
////      match = individual.sumOfMutationsOfType(m2);// - subpop.getValue("mate-opt");
////      //print(match);
////      if (rnorm(1,0.0,match_sd) < match){
////         subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
////         litterSize = rpois(1, pois_mean);
////         for (j in seqLen(litterSize))
////            subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
////      }
////	   subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
////   }else{
//         litterSize = rpois(1, pois_mean);
//         if (litterSize > 0){
//         	for (j in seqLen(litterSize))
//            	subpop.addCrossed(subpop.sampleIndividuals(1, sex="F"), individual);
//         }
////	}
//}

1 early() {
	sim.addSubpop("p1", p1size);
	sim.addSubpop("p2", p2size);
	sim.setValue("opt1", opt1start);
	p1.setValue("mate-opt", opt1start);
	p2.setValue("mate-opt", opt2);
	
	p1.setSpatialBounds(c(0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
	p2.setSpatialBounds(c(0.0, 0.0, 0.0, 1.0, 1.0, 1.0));
	
	defineConstant("mapValues", runif(25, -10.0, 10.0));
	p1.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(-10.0, 10.0), colors=c("red", "yellow"));
	p2.defineSpatialMap("map1", "xy", c(5, 5), mapValues, interpolate=T,
		valueRange=c(-10.0, 10.0), colors=c("red", "yellow"));
	
	for (ind in p1.individuals)
		ind.setSpatialPosition(p1.pointUniform());
	for (ind in p2.individuals)
		ind.setSpatialPosition(p2.pointUniform());

}


early() {

	i1.evaluate();

	// QTL-based phenotypes
	inds = sim.subpopulations.individuals;
	phenotypes = inds.sumOfMutationsOfType(m1);
	
	inds.color = p1.spatialMapColor("map1", phenotypes);
	
	//set optimum for pop1
	if (sim.generation > Tdelta){
		sim.setValue("opt1", (sim.getValue("opt1") + delta));
		if (sim.getValue("opt1") < opt1b){
		  sim.setValue("opt1", opt1b);
		}
		optimum1 = sim.getValue("opt1");
	}else if (sim.generation < Tburnin)
		optimum1 = sim.generation/Tburnin * sim.getValue("opt1");
	else
		optimum1 = sim.getValue("opt1");
	
	//set optimum for pop2
	if (sim.generation > Tdelta)
		optimum2 = opt2;
	else if (sim.generation < Tburnin)
		optimum2 = sim.generation/Tburnin * opt2;
	else
		optimum2 = opt2;
	
	opts = c(rep(optimum1, p1.individualCount), rep(optimum2, p2.individualCount));
	deviations = opts - phenotypes;
	fitnessFunctionMax = dnorm(0.0, 0.0, 5.0);
	adaptation = dnorm(deviations, 0.0, 5.0) / fitnessFunctionMax;
	inds.fitnessScaling = adaptation;
	inds.tagF = phenotypes;   // just for output below
	
	// spatial competition provides density-dependent selection
 	inds1 = p1.individuals;
 	inds2 = p2.individuals;
 	competition1 = i1.totalOfNeighborStrengths(inds1);
 	competition1 = (competition1 + 1) / (2 * PI * S^2);
 	inds1.fitnessScaling = K1 / competition1;
  	inds2 = p2.individuals;
 	competition2 = i1.totalOfNeighborStrengths(inds2);
 	competition2 = (competition2 + 1) / (2 * PI * S^2);
 	inds2.fitnessScaling = K2 / competition2;
	
	if (sim.generation > Tdelta){
	   //migration p2 --> p1 w/ probability m
      prob_mig = runif(inds.size(), 0.0, 1.0);
      moving = inds[prob_mig < m];
      from_p2 = moving[moving.subpopulation == p2];
      p1.takeMigrants(from_p2);   
   }

}
fitness(m1) { return 1.0; }
//fitness(m2) { return 1.0; }
fitness(m2, p1) { return min(relFitness, 1.0); }
fitness(m3, p2) { return min(relFitness, 1.0); }
fitness(m2, p2) { return 1/relFitness; }
fitness(m3, p1) { return 1/relFitness; }
//fitness(m2, p1) {return 1.0;}
//fitness(m3, p2) {return 1.0;}


modifyChild() {
	// set offspring position based on parental position
	do
		pos = c(parent1.spatialPosition[0:1] + rnorm(2, 0, 0.005), 0.0);
	while (!p1.pointInBounds(pos));
	child.setSpatialPosition(pos);
	
	return T;
}


late() {
	if (p1.individualCount == 0)
	{
		// stop at extinction
		catn("Extinction in generation " + sim.generation + ".");
		sim.simulationFinished();
	}

	// move around a bit
	for (ind in p1.individuals)
 	{
 		newPos = ind.spatialPosition + c(runif(2, -0.01, 0.01),0.0);
 		ind.setSpatialPosition(newPos);
 	}
	// then look for mates
	i2.evaluate();
}
100000 late() { sim.simulationFinished(); }
